{"ast":null,"code":"import _slicedToArray from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      var rows = new Array(this.props.nrows);\n      var cols = new Array(this.props.ncols);\n\n      for (var i = 0; i < this.props.ncols; i++) {\n        var rand = Math.round(Math.random());\n        cols.push(rand);\n        cols.s;\n      }\n\n      console.log(cols);\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.board);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: Math.round(Math.random()) === 1 ? true : false\n};\nexport default Board;","map":{"version":3,"sources":["D:/school/reactJS/the-modern-react-bootcamp/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","rows","Array","nrows","cols","ncols","i","rand","Math","round","random","push","s","console","log","coord","split","map","Number","y","x","flipCell","defaultProps","chanceLightStartsOn"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;AAOJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAGjB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAG,MAAKC,WAAL;AAFG,KAAb;AAJiB;AAQlB;AAED;;;;;kCACc;AACZ,UAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,UAAIE,IAAI,GAAG,IAAIC,KAAJ,CAAU,KAAKN,KAAL,CAAWO,KAArB,CAAX;AACA,UAAIC,IAAI,GAAG,IAAIF,KAAJ,CAAU,KAAKN,KAAL,CAAWS,KAArB,CAAX;;AAED,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,KAAL,CAAWS,KAA/B,EAAsCC,CAAC,EAAvC,EAA2C;AACzC,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,EAAX,CAAX;AACAN,QAAAA,IAAI,CAACO,IAAL,CAAUJ,IAAV;AACAH,QAAAA,IAAI,CAACQ,CAAL;AACD;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACA,aAAOL,KAAP;AACD;AAED;;;;oCAEgBgB,K,EAAO;AAAA,wBACA,KAAKnB,KADL;AAAA,UAChBS,KADgB,eAChBA,KADgB;AAAA,UACTF,KADS,eACTA,KADS;AAErB,UAAIJ,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRgB,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGf,KAAd,IAAuBc,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGhB,KAAzC,EAAgD;AAC9CJ,UAAAA,KAAK,CAACoB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACrB,KAAK,CAACoB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;;6BAES;AACLP,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAL,CAAWE,KAAvB;AACF,0BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFO,CAQP;AAEA;AAEA;AAEA;AACD;;;;EA5EiBN,S;;AAAdE,K,CAEG2B,Y,GAAe;AACpBnB,EAAAA,KAAK,EAAE,CADa;AAEpBE,EAAAA,KAAK,EAAE,CAFa;AAGpBkB,EAAAA,mBAAmB,EAAEf,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,EAAX,MAA8B,CAA9B,GAAkC,IAAlC,GAAyC;AAH1C,C;AA8ExB,eAAef,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: Math.round(Math.random()) === 1 ? true : false\n  }\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board : this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    let rows = new Array(this.props.nrows)\n    let cols = new Array(this.props.ncols)\n\n   for (let i = 0; i < this.props.ncols; i++) {\n     let rand = Math.round(Math.random())\n     cols.push(rand)\n     cols.s\n   }\n\n    console.log(cols)\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n      console.log(this.state.board)\n    return (\n      <div className=\"Board\">\n\n      </div>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}