{"ast":null,"code":"import _slicedToArray from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\school\\\\reactJS\\\\the-modern-react-bootcamp\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x); // FLIP CLICKED CELL\n\n      flipCell(y, x + 1); // FLIP RIGHT CELL\n\n      flipCell(y, x - 1); // FLIP LEFT CELL\n\n      flipCell(y + 1, x); // FLIP ABOVE CELL\n\n      flipCell(y - 1, x); // FLIP BELOW CELL\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hasWon = _this$state.hasWon,\n          board = _this$state.board;\n\n      var drawBoard = function drawBoard() {\n        var tblBoard = [];\n\n        for (var y = 0; y < _this2.props.nrows; y++) {\n          var row = [];\n\n          var _loop = function _loop(x) {\n            var coord = \"\".concat(y, \"-\").concat(x);\n            row.push( /*#__PURE__*/React.createElement(Cell, {\n              key: coord,\n              isLit: board[y][x],\n              flipCellsAroundMe: function flipCellsAroundMe() {\n                return _this2.flipCellsAround(coord);\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 18\n              }\n            }));\n          };\n\n          for (var x = 0; x < _this2.props.ncols; x++) {\n            _loop(x);\n          }\n\n          tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n            key: y,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }\n          }, row));\n        }\n\n        return tblBoard;\n      };\n\n      var renderGame;\n\n      if (!hasWon) {\n        renderGame = drawBoard();\n      } else {\n        renderGame = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"winner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 38\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 62\n          }\n        }, \"You\"), /*#__PURE__*/React.createElement(\"h1\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 98\n          }\n        }, \" win !\")));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }, renderGame)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["D:/school/reactJS/the-modern-react-bootcamp/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","drawBoard","tblBoard","flipCellsAround","renderGame","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;AAOJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAG,MAAKC,WAAL;AAFG,KAAb;AAHiB;AAOlB;;;;kCACa;AACZ,UAAID,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,GAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,GAAX;AACD;;AAED,aAAOJ,KAAP;AACD;AAED;;;;oCAEgBW,K,EAAO;AAAA,wBACE,KAAKd,KADP;AAAA,UACfS,KADe,eACfA,KADe;AAAA,UACRH,KADQ,eACRA,KADQ;AAErB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRW,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBZ,CAHgB;AAAA,UAGbG,CAHa;;AAIrB,eAASU,QAAT,CAAkBb,CAAlB,EAAqBG,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF;;AAEDU,MAAAA,QAAQ,CAACb,CAAD,EAAGG,CAAH,CAAR,CAZqB,CAYP;;AACdU,MAAAA,QAAQ,CAACb,CAAD,EAAIG,CAAC,GAAC,CAAN,CAAR,CAbqB,CAaJ;;AACjBU,MAAAA,QAAQ,CAACb,CAAD,EAAIG,CAAC,GAAC,CAAN,CAAR,CAdqB,CAcJ;;AACjBU,MAAAA,QAAQ,CAACb,CAAC,GAAC,CAAH,EAAMG,CAAN,CAAR,CAfqB,CAeJ;;AACjBU,MAAAA,QAAQ,CAACb,CAAC,GAAC,CAAH,EAAMG,CAAN,CAAR,CAhBqB,CAgBJ;AAEjB;AACA;;AAEA,UAAIN,MAAM,GAAGC,KAAK,CAACgB,KAAN,CAAY,UAAAZ,GAAG;AAAA,eAAIA,GAAG,CAACY,KAAJ,CAAU,UAAAC,IAAI;AAAA,iBAAI,CAACA,IAAL;AAAA,SAAd,CAAJ;AAAA,OAAf,CAAb;AAEA,WAAKC,QAAL,CAAc;AAAElB,QAAAA,KAAK,EAAEA,KAAT;AAAgBD,QAAAA,MAAM,EAAEA;AAAxB,OAAd;AACD;;;6BACQ;AAAA;;AAAA,wBACiB,KAAKD,KADtB;AAAA,UACDC,MADC,eACDA,MADC;AAAA,UACOC,KADP,eACOA,KADP;;AAGP,UAAImB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,YAAIC,QAAQ,GAAG,EAAf;;AACA,aAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAACL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAC3C,cAAIE,GAAG,GAAG,EAAV;;AAD2C,qCAElCC,CAFkC;AAGzC,gBAAIM,KAAK,aAAMT,CAAN,cAAWG,CAAX,CAAT;AACAD,YAAAA,GAAG,CAACG,IAAJ,eAAS,oBAAC,IAAD;AAAM,cAAA,GAAG,EAAGI,KAAZ;AAAoB,cAAA,KAAK,EAAGX,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAA5B;AAA2C,cAAA,iBAAiB,EAAG;AAAA,uBAAM,MAAI,CAACgB,eAAL,CAAqBV,KAArB,CAAN;AAAA,eAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAT;AAJyC;;AAE3C,eAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAACR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAAA,kBAAlCA,CAAkC;AAG1C;;AACDe,UAAAA,QAAQ,CAACb,IAAT,eAAc;AAAI,YAAA,GAAG,EAAGL,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAgBE,GAAhB,CAAd;AACC;;AACD,eAAOgB,QAAP;AACD,OAXD;;AAaA,UAAIE,UAAJ;;AACA,UAAG,CAACvB,MAAJ,EAAY;AACVuB,QAAAA,UAAU,GAAGH,SAAS,EAAtB;AACD,OAFD,MAEO;AACLG,QAAAA,UAAU,gBAAG;AAAK,UAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkB;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAwB;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAxB,eAA4D;AAAI,UAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA5D,CAAlB,CAAb;AACD;;AAED,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CADF,eAKI;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIA,UADJ,CADF,CALJ,CADF;AAaD;;;;EA3FiB5B,S;;AAAdE,K,CAEG2B,Y,GAAe;AACpBpB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA6FxB,eAAed,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board : this.createBoard()\n    }\n  }\n  createBoard() {\n    let board = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x) // FLIP CLICKED CELL\n    flipCell(y, x+1) // FLIP RIGHT CELL\n    flipCell(y, x-1) // FLIP LEFT CELL\n    flipCell(y+1, x) // FLIP ABOVE CELL\n    flipCell(y-1, x) // FLIP BELOW CELL\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    let hasWon = board.every(row => row.every(cell => !cell))\n    \n    this.setState({ board: board, hasWon: hasWon });\n  }\n  render() {\n    let { hasWon, board } = this.state\n\n    let drawBoard = () => {\n      let tblBoard = [];\n      for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`\n        row.push(<Cell key={ coord } isLit={ board[y][x]  } flipCellsAroundMe={ () => this.flipCellsAround(coord) } />)\n      }\n      tblBoard.push(<tr key={ y }>{ row }</tr>)\n      }\n      return tblBoard\n    }\n\n    let renderGame;\n    if(!hasWon) {\n      renderGame = drawBoard()\n    } else {\n      renderGame = <div className=\"\"><div className=\"winner\"><h1 className=\"neon-orange\">You</h1><h1 className=\"neon-blue\"> win !</h1></div></div>\n    }\n\n    return (\n      <div>\n        <div className=\"Board-title\">\n          <span className=\"neon-orange\">Lights</span>\n          <span className=\"neon-blue\">Out</span>\n        </div>\n          <table className=\"Board\">\n            <tbody>\n              { renderGame }\n            </tbody>\n          </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}